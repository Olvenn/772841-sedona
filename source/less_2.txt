.white { color: white; } /* объявление примеси */
.text { .white; }        /* применение примеси */
результат
.white { color: white; }
.text { color: white; }
.white() { color: white; } /* объявление невыводимой примеси */
.text { .white; }          /* применение примеси */
результат
.text { color: white; }
.big() {
    width: 100500px;
}
.white() {
    color: white;
}
.block {
    .big();
    .white();
}
результат.block {
    width: 100500px;
    color: white;
}
.margin(@value) {
    margin-top: @value;
    margin-bottom: @value;
}
.block {
    .margin(10px);
}
результат
.block {
    margin-top: 10px;
    margin-bottom: 10px;
}
.big(@size: 100500px) {
    width: @size;
}
.block {
    .big(10px);
}
результат
.block {
    width: 10px;
}
.big(@size: 100500px) {
    width: @size;
}
.block {
    .big();
}
результат
.block {
    width: 100500px;
}
.offset(@padding; @margin) {
    padding: @padding;
    margin: @margin;
}
.block {
    .offset(5px; 10px);
}
результат
.block {
    padding: 5px;
    margin: 10px;
}
.set-font-size(@size) {
    font-size: @size;
}.set-font-size(smaller; @size) {
    font-size: @size / 2;
}
.text {
    .set-font-size(100px);
}
.small-text {
    .set-font-size(smaller; 100px);
}
результат
.text {
    font-size: 100px;
}
.small-text {
    font-size: 50px;
}
универсальный шаблон
.font-size(bigger; @size)  {
    font-size: @size * 2;
}
.font-size(smaller; @size) {
    font-size: @size / 2;
}
.font-size(@_; @size) {
    color: #000000;
} // универсальный шаблон
.content-bigger {
    .font-size(bigger, 20px);
}
.content-smaller {
    .font-size(smaller, 20px);
}
результат
.content-bigger {
    font-size: 40px;
    color: #000000;
}
.content-smaller {
    font-size: 10px;
    color: #000000;
}
.mixin(@variable) when (@variable = 1) {
    // сделать что-то
}
.some-class {
    .mixin(1);
}
.mixin(@color) when (lightness(@color) > 50%) {
    // сделать что-то, когда цвет светлее серого
}
.mixin(@color) when (lightness(@color) = 100%) {
    // сделать что-то, когда цвет полностью белый
}
.text-color() when (@theme = light) { //внешняя переменная
    color: white;
}
@theme: light;
.content {
    .text-color();
}
результат.content {
    color: white;
}
Условия и типы параметров
// проверка: значение — цвет
.mixin(@param) when (iscolor(@param)) { … }
// проверка: значение — число
.mixin(@param) when (isnumber(@param)) { … }
// проверка: значение — строка
.mixin(@param) when (isstring(@param)) { … }
// проверка: значение — ключевое слово
.mixin(@param) when (iskeyword(@param)) { … }
// проверка: значение — url
.mixin(@param) when (isurl(@param)) { … }

@red: #ff4136;

.monster-happy {
    .magic(@red);
}

.monster-foolish {
    .magic(150px);
}

.magic(@parameter) when (iscolor(@parameter)) {
    background-color: @parameter;
}

.magic(@parameter) when (isnumber(@parameter)) {
    width: @parameter;
    height: @parameter;
}






.text-color() when (@theme = light) {
    color: white;
}
@theme: light;
.content {
    .text-color();
}
результат
.content {
    color: white;
}
